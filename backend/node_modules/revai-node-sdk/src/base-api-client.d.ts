import { ApiRequestHandler } from './api-request-handler';
import { RevAiApiClientConfig } from './models/RevAiApiClientConfig';
/**
 * Base client implementation. Intended to be extended by a specific client per API
 */
export declare abstract class BaseApiClient<TJob, TResult> {
    private apiClientConfig;
    apiHandler: ApiRequestHandler;
    /**
     * @param either string Access token used to validate API requests or RevAiApiClientConfig object
     * @param serviceApi Type of api service
     * @param version (optional) version of the API to be used
     */
    constructor(params: RevAiApiClientConfig | string, serviceApi: string, version: string);
    /**
     * Get information about a specific job
     * @param id Id of job whose details are to be retrieved
     * @returns Job details
     */
    protected _getJobDetails(id: string): Promise<TJob>;
    /**
     * Get a list of jobs submitted within the last 30 days in reverse chronological order
     * (last submitted first) up to the provided limit number of jobs per call. Pagination is supported via passing
     * the last job id from previous call into starting_after.
     * @param params Query params for this request
     * @returns List of job details
     */
    protected _getListOfJobs(params?: {}): Promise<TJob[]>;
    /**
     * Delete a specific job.
     * All data related to the job will be permanently deleted.
     * A job can only by deleted once it's completed.
     * @param id Id of job to be deleted
     */
    protected _deleteJob(id: string): Promise<void>;
    /**
     * Submit a job to the api.
     * @param options (optional) Options submitted with the job
     * @returns Details of the submitted job
     */
    protected _submitJob(options?: {}): Promise<TJob>;
    /**
     * Get the result of a job.
     * @param id id of job to get result of
     * @param options (optional) Options submitted with the request
     * @param headers (optional) Http headers to be used for the request
     * @returns Job result object
     */
    protected _getResult(id: string, options?: {}, headers?: {}): Promise<TResult>;
    private buildQueryParams;
    protected filterNullOptions(options: {}): any;
}
