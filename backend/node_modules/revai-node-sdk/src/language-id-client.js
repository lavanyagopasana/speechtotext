"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageIdClient = void 0;
/* eslint-disable no-underscore-dangle */
const fs = require("fs");
const FormData = require("form-data");
const base_api_client_1 = require("./base-api-client");
const LanguageIdContentType = 'application/vnd.rev.languageid.v1.0+json';
const TWO_GIGABYTES = 2e9; // Number of Bytes in 2 Gigabytes
/**
 * Client which handles connection to the Rev AI Language Id API.
 */
class LanguageIdClient extends base_api_client_1.BaseApiClient {
    /**
     * @param either string Access token used to validate API requests or RevAiApiClientConfig object
     */
    constructor(params) {
        super(params, 'languageid', 'v1');
    }
    /**
     * See https://docs.rev.ai/api/language-identification/reference/#operation/GetLanguageIdentificationJobById
     * Get information about a specific language id job
     * @param id Id of job whose details are to be retrieved
     * @returns Job details
     */
    getJobDetails(id) {
        const _super = Object.create(null, {
            _getJobDetails: { get: () => super._getJobDetails }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._getJobDetails.call(this, id);
        });
    }
    /**
     * See https://docs.rev.ai/api/language-identification/reference/#operation/GetListOfLanguageIdentificationJobs
     * Get a list of language id jobs submitted within the last 30 days in reverse chronological order
     * @param options Job options for getting list of jobs
     * @returns List of job details
     */
    getListOfJobs(options) {
        const _super = Object.create(null, {
            _getListOfJobs: { get: () => super._getListOfJobs }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._getListOfJobs.call(this, options);
        });
    }
    /**
     * See https://docs.rev.ai/api/language-identification/reference/#operation/DeleteLanguageIdentificationJobById
     * Delete a specific language id job.
     * All data related to the job, such as input and result, will be permanently deleted.
     * A job can only by deleted once it's completed.
     * @param id Id of job to be deleted
     */
    deleteJob(id) {
        const _super = Object.create(null, {
            _deleteJob: { get: () => super._deleteJob }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._deleteJob.call(this, id);
        });
    }
    /**
     * See https://docs.rev.ai/api/language-identification/reference/#operation/SubmitLanguageIdentificationJob
     * Submits a language id job from url with options.
     * @param options Options submitted with the job: see LanguageIdJobOptions object
     * @returns Details of the submitted job
     */
    submitJob(options = {}) {
        const _super = Object.create(null, {
            _submitJob: { get: () => super._submitJob }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._submitJob.call(this, options);
        });
    }
    /**
     * See https://docs.rev.ai/api/language-identification/reference/#operation/SubmitLanguageIdentificationJob
     * Submit local audio data for language id.
     * @param audioData Audio data to be submitted for language id.
     * @param filename (optional) Name of file associated with audio.
     * @param options (optional) Options submitted with the job, see LanguageIdJobOptions object
     *     or https://docs.rev.ai/api/language-identification/reference/#operation/SubmitLanguageIdentificationJob
     * @returns Details of submitted job
     */
    submitJobAudioData(audioData, filename, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = new FormData();
            payload.append('media', audioData, { filename: filename || 'audio_file' });
            if (options) {
                options = this.filterNullOptions(options);
                payload.append('options', JSON.stringify(options));
            }
            return yield this.apiHandler.makeApiRequest('post', '/jobs', payload.getHeaders(), 'json', payload, TWO_GIGABYTES);
        });
    }
    /**
     * See https://docs.rev.ai/api/language-identification/reference/#operation/SubmitLanguageIdentificationJob
     * Send local file for language id.
     * @param filepath Path to local file to be submitted for language id. Assumes the process has access to
     * read this file.
     * @param options (optional) Options submitted with the job, see LanguageIdJob object
     *     or https://docs.rev.ai/api/language-identification/reference/#operation/SubmitLanguageIdentificationJob
     * @returns Details of submitted job
     */
    submitJobLocalFile(filepath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = new FormData();
            payload.append('media', fs.createReadStream(filepath));
            if (options) {
                options = this.filterNullOptions(options);
                payload.append('options', JSON.stringify(options));
            }
            return yield this.apiHandler.makeApiRequest('post', '/jobs', payload.getHeaders(), 'json', payload, TWO_GIGABYTES);
        });
    }
    /**
     * See https://docs.rev.ai/api/language-identification/reference/#operation/GetLanguageIdentificationResultById
     * Get the result of a successful language id job.
     * @param id Id of job to get result of
     * @returns Language id job result
     */
    getResult(id) {
        const _super = Object.create(null, {
            _getResult: { get: () => super._getResult }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._getResult.call(this, id, {}, { 'Accept': LanguageIdContentType });
        });
    }
}
exports.LanguageIdClient = LanguageIdClient;
//# sourceMappingURL=language-id-client.js.map