"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicExtractionClient = void 0;
/* eslint-disable no-underscore-dangle */
const base_api_client_1 = require("./base-api-client");
const TopicsContentType = 'application/vnd.rev.topic.v1.0+json';
/**
 * Client which handles connection to the Rev AI topic extraction API.
 */
class TopicExtractionClient extends base_api_client_1.BaseApiClient {
    /**
     * @param accessToken Access token used to validate API requests
     */
    constructor(accessToken) {
        super(accessToken, 'topic_extraction', 'v1');
    }
    /**
     * See https://docs.rev.ai/api/topic-extraction/reference/#operation/GetTopicExtractionJobById
     * Get information about a specific topic extraction job
     * @param id Id of job whose details are to be retrieved
     * @returns Job details
     */
    getJobDetails(id) {
        const _super = Object.create(null, {
            _getJobDetails: { get: () => super._getJobDetails }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._getJobDetails.call(this, id);
        });
    }
    /**
     * See https://docs.rev.ai/api/topic-extraction/reference/#operation/GetListOfTopicExtractionJobs
     * Get a list of topic extraction jobs submitted within the last 30 days in reverse chronological order
     * @param options Job options for getting list of jobs
     * @returns List of job details
     */
    getListOfJobs(options) {
        const _super = Object.create(null, {
            _getListOfJobs: { get: () => super._getListOfJobs }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._getListOfJobs.call(this, options);
        });
    }
    /**
     * See https://docs.rev.ai/api/topic-extraction/reference/#operation/DeleteTopicExtractionJobById
     * Delete a specific topic extraction job.
     * All data related to the job, such as input and result, will be permanently deleted.
     * A job can only by deleted once it's in a terminal state.
     * @param id Id of job to be deleted
     */
    deleteJob(id) {
        const _super = Object.create(null, {
            _deleteJob: { get: () => super._deleteJob }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._deleteJob.call(this, id);
        });
    }
    /**
     * See https://docs.rev.ai/api/topic-extraction/reference/#operation/SubmitTopicExtractionJob
     * Submits a topic extraction job with plain text as the input.
     * @param options Options submitted with the job: see TopicExtractionJobOptions object
     * @returns Details of the submitted job
     */
    submitJobFromText(text, options = {}) {
        const _super = Object.create(null, {
            _submitJob: { get: () => super._submitJob }
        });
        return __awaiter(this, void 0, void 0, function* () {
            options = Object.assign(Object.assign({}, options), { text: text });
            return _super._submitJob.call(this, options);
        });
    }
    /**
     * See https://docs.rev.ai/api/topic-extraction/reference/#operation/SubmitTopicExtractionJob
     * Submits a topic extraction job with a json transcript as the input.
     * @param options Options submitted with the job: see TopicExtractionJobOptions object
     * @returns Details of the submitted job
     */
    submitJobFromJson(json, options = {}) {
        const _super = Object.create(null, {
            _submitJob: { get: () => super._submitJob }
        });
        return __awaiter(this, void 0, void 0, function* () {
            options = Object.assign(Object.assign({}, options), { json: json });
            return _super._submitJob.call(this, options);
        });
    }
    /**
     * See https://docs.rev.ai/api/topic-extraction/reference/#operation/GetTopicExtractionResultById
     * Get the result of a topic extraction job.
     * @param id Id of job to get result of
     * @param options Options submitted with getting results
     * @returns Topic extraction job result
     */
    getResult(id, options) {
        const _super = Object.create(null, {
            _getResult: { get: () => super._getResult }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super._getResult.call(this, id, options, { 'Accept': TopicsContentType });
        });
    }
}
exports.TopicExtractionClient = TopicExtractionClient;
//# sourceMappingURL=topic-extraction-client.js.map